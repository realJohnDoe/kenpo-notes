name: Build and Test

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  quartz-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: 22

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-quartz-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            node-quartz-

      - run: npm ci

      - name: Test
        run: npm test

      - name: Build Quartz
        run: npx quartz build

      - name: Upload Quartz artifact
        uses: actions/upload-artifact@v4
        with:
          name: quartz-build
          path: ./public
          if-no-files-found: error

  animations-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: 22

      - name: Cache animations dependencies
        uses: actions/cache@v4
        with:
          path: animations/node_modules
          key: node-animations-${{ hashFiles('animations/package-lock.json') }}
          restore-keys: |
            node-animations-

      - name: Install animations dependencies
        run: |
          cd animations
          npm ci

      - name: Build animations
        run: |
          cd animations
          npm run build

      - name: Upload animations artifact
        uses: actions/upload-artifact@v4
        with:
          name: animations-build
          path: ./animations/build
          if-no-files-found: error

  deploy:
    needs: [quartz-build, animations-build]
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Download Quartz artifact
        uses: actions/download-artifact@v4
        with:
          name: quartz-build
          path: ./public

      - name: Download animations artifact
        uses: actions/download-artifact@v4
        with:
          name: animations-build
          path: ./animations-build

      - name: Combine builds
        run: |
          # Verify artifacts exist
          ls -la ./public/
          ls -la ./animations-build/ || echo "No animations build found"
          
          # Copy animations build to the appropriate path in the main build
          # Since animations has base path '/kenpo-notes' and routes like '/animation/*',
          # we need to merge them into the main public directory
          if [ -d "./animations-build" ] && [ "$(ls -A ./animations-build)" ]; then
            echo "Merging animations build into main build..."
            cp -r ./animations-build/* ./public/
            echo "Merged successfully"
          else
            echo "No animations build to merge"
          fi
          
          # Show final structure
          echo "Final build structure:"
          find ./public -type f | head -20

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload combined artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  publish-tag:
    if: ${{ github.repository == 'jackyzha0/quartz' && github.ref == 'refs/heads/v4' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: 22
      - name: Get package version
        run: node -p -e '`PACKAGE_VERSION=${require("./package.json").version}`' >> $GITHUB_ENV
      - name: Create release tag
        uses: pkgdeps/git-tag-action@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          github_repo: ${{ github.repository }}
          version: ${{ env.PACKAGE_VERSION }}
          git_commit_sha: ${{ github.sha }}
          git_tag_prefix: "v"
